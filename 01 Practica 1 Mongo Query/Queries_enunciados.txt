//Buscar los estudiantes de género masculino
db.students.find({"gender": "H"})
db.students.find({"gender": "H"}).count()
db.students.count({"gender": "H"})
-->2895

//Buscar los estudiantes de género femenino


//Buscar los estudiantes nacidos en el año 1993


//Buscar los libros cuyo precio esté expresado en USD
db.books.find({"price.currency": "USD"})
-->333

//Buscar los estudiantes de género masculino y nacidos en el año 1993
db.students.find({"gender": "H", "birthYear": 1993})
db.students.find({"$and": [{"gender": "H"},{"birthYear": 1993}]})



//Buscar los estudiantes nacidos en la década de los 90

//Buscar los estudiantes de género masculino nacidos en la 

//Buscar los estudiantes de género femenino nacidos en la década de los 90


//Buscar los estudiantes nacidos en la década de los 80


//Buscar los estudiantes de género masculino nacidos en la década de los 80


//Buscar los libros con el tag html5


//Buscar los libros con el tag html


//Buscar los libros con el tag html, html5, css o css3
db.books.find({"tags": {$in: ["html","html5","css","css3"]}})
db.books.find({$or: [{"tags": "html"},{"tags": "html5"},
                     {"tags": "css"},{"tags": "css3"}]})


//Buscar los libros que no tengan el tag html, html5, css o css3


//Buscar los libros que tengan el tag 'programming' y 'agile'

//Buscar los estudiantes que no han nacido en el año 1985


//Buscar aquellos estudiantes que hayan nacido en el año 1970, 1980 o 1990


//Buscar aquellos estudiantes que no hayan nacido en el año 1970, 1980 o 1990


//Buscar los estudiantes nacidos en año par


//Buscar estudiantes nacidos en año par de la decada de los 70 que sean de genero masculino
db.students.find({$and: [{gender: "H"}, {"birthYear": {$mod: [2, 0], $gte: 1970, $lt: 1980}}]})
db.students.find({gender: "H", "birthYear": {$mod: [2, 0], $gte: 1970, $lt: 1980}})
-->403

//Buscar los estudiantes nacidos en año impar
db.students.find({"birthYear": {$mod: [2, 1]}})


//Buscar los estudiantes que tengan teléfono auxiliar



//Buscar los estudiantes que no tengan segundo apellido


//Buscar los estudiantes que tengan teléfono auxiliar y solo un apellido


//Buscar los libros escritos por 2 autores


//Buscar los estudiantes cuyo email termine en .net


//Buscar los estudiantes cuyo email termine en .org
db.students.find({"email": /\.org$/i})
-->16

//Buscar los estudiantes cuyo nombre empiece por vocal


//Buscar los estudiantes con nombre más largo de 13 caracteres


//Buscar los estudiantes con 3 o más vocales en su nombre


//Buscar los estudiantes cuyo dni empiece por letra


//Buscar los estudiantes cuyo dni empiece y termine por letra


//Buscar los estudiantes cuyo teléfono empiece por 622.


//Eliminar los estudiantes con dni asignado a "NULL"
db.students.update({"dni": "NULL"}, 
                   {$unset:{"dni": ""}},
				   {"multi": true})

//Buscar los estudiantes que no tienen dni
db.students.find({"dni": {$exists: false}})				   
			
			
########################################################################
->Collection: bios (university)

//Buscar aquellos desarrolladores que sigan vivos


//Buscar aquellos desarrolladores que hayan obtenido un premio en el año 2002


//Buscar aquellos desarrolladores que hayan obtenido algun premio entre el año 1995 y 2000


//Buscar aquellos desarrolladores que hayan obtenido exactamente 3 premios


//Buscar aquellos desarrolladores que hayan realizado contribuciones en OOP


//Buscar aquellos desarrolladores que hayan realizado contribuciones en OOP o Java


//Buscar aquellos desarrolladores que hayan realizado contribuciones en OOP y Simula

->Collection: tweets (twitter)

//Mostrar todos los tweets publicados usuarios con más de 100 followers


//Mostrar todos los tweets publicados por el usuario 'behcolin'


-->Collection: countries (geography)
//Mostrar aquellos paises cuya moneda es el euro


//Mostrar aquellos paises donde el español es el idioma nativo


//Mostrar aquellos paises donde el español es lengua oficial




//Mostrar los tweets publicados por usuarios con el mismo numero de seguidores y amigos
db.tweets.find({$where: function() { return ( this.user.friends_count == this.user.followers_count ) }})
db.tweets.find({$where: "this.user.friends_count == this.user.followers_count " })

---> Aggregation Framework (MongoDB 2.2)
//Mostrar el número de tweets publicados por cada usuario





